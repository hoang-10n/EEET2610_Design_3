# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UIi.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtTest
from PyQt5.QtWidgets import (QApplication, QWidget)
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.Qt import Qt
import file_rccccc
import paho.mqtt.client as mqtt
import paho.mqtt.publish as publish
import base64
import cv2
import numpy as np

broker_location = "192.168.4.1"

global pixmap
pixmap = None


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.x = 0
        self.y = 290
        self.i = 0
        self.angle = 10
        self.control = False
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)
        MainWindow.resize(1908, 1000)
        MainWindow.setMaximumSize(QtCore.QSize(2000, 1000))
        MainWindow.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        MainWindow.setAutoFillBackground(True)
        MainWindow.setStyleSheet("alternate-background-color: rgb(43, 43, 43);")
        MainWindow.setDocumentMode(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.upButton = QtWidgets.QPushButton(self.centralwidget)
        self.upButton.setGeometry(QtCore.QRect(110, 320, 101, 101))
        font = QtGui.QFont()
        font.setPointSize(35)
        self.upButton.setFont(font)
        self.upButton.setAutoFillBackground(False)
        self.upButton.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.upButton.setObjectName("upButton")
        self.downButton = QtWidgets.QPushButton(self.centralwidget)
        self.downButton.setGeometry(QtCore.QRect(110, 420, 101, 101))
        font = QtGui.QFont()
        font.setPointSize(31)
        self.downButton.setFont(font)
        self.downButton.setAutoFillBackground(False)
        self.downButton.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.downButton.setObjectName("downButton")
        self.rightButton = QtWidgets.QPushButton(self.centralwidget)
        self.rightButton.setGeometry(QtCore.QRect(210, 370, 101, 91))
        font = QtGui.QFont()
        font.setPointSize(35)
        self.rightButton.setFont(font)
        self.rightButton.setAutoFillBackground(False)
        self.rightButton.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.rightButton.setObjectName("rightButton")
        self.leftButton = QtWidgets.QPushButton(self.centralwidget)
        self.leftButton.setGeometry(QtCore.QRect(10, 370, 101, 91))
        font = QtGui.QFont()
        font.setPointSize(35)
        self.leftButton.setFont(font)
        self.leftButton.setAutoFillBackground(False)
        self.leftButton.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.leftButton.setObjectName("leftButton")
        self.status_bar = QtWidgets.QLabel(self.centralwidget)
        self.status_bar.setGeometry(QtCore.QRect(60, 530, 211, 61))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.status_bar.setFont(font)
        self.status_bar.setAutoFillBackground(False)
        self.status_bar.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.status_bar.setScaledContents(False)
        self.status_bar.setAlignment(QtCore.Qt.AlignCenter)
        self.status_bar.setObjectName("status_bar")
        self.otometer = QtWidgets.QLabel(self.centralwidget)
        self.otometer.setGeometry(QtCore.QRect(0, 710, 301, 271))
        self.otometer.setText("")
        self.otometer.setPixmap(QtGui.QPixmap(":/newPrefix/tải xuống.jpg"))
        self.otometer.setScaledContents(True)
        self.otometer.setObjectName("otometer")
        self.switchButton = QtWidgets.QPushButton(self.centralwidget)
        self.switchButton.setGeometry(QtCore.QRect(30, 600, 271, 71))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.switchButton.setFont(font)
        self.switchButton.setStyleSheet("background-color: rgb(170, 0, 0);\n"
                                        "background-color: rgb(66, 199, 0);")
        self.switchButton.setObjectName("switchButton")
        self.car = QtWidgets.QLabel(self.centralwidget)
        self.car.setGeometry(QtCore.QRect(0, 290, 16, 16))
        self.car.setMaximumSize(QtCore.QSize(151, 16777215))
        self.car.setText("")
        self.car.setPixmap(QtGui.QPixmap(":/newPrefix/12.png"))
        self.car.setScaledContents(True)
        self.car.setObjectName("car")
        self.otometer_data = QtWidgets.QLabel(self.centralwidget)
        self.otometer_data.setGeometry(QtCore.QRect(80, 830, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.otometer_data.setFont(font)
        self.otometer_data.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.otometer_data.setAlignment(QtCore.Qt.AlignCenter)
        self.otometer_data.setObjectName("otometer_data")
        self.camera = QtWidgets.QLabel(self.centralwidget)
        self.camera.setGeometry(QtCore.QRect(630, 0, 1271, 981))
        self.camera.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.camera.setFrameShadow(QtWidgets.QFrame.Plain)
        self.camera.setLineWidth(11)
        self.camera.setMidLineWidth(0)
        self.camera.setText("")
        self.camera.setPixmap(QtGui.QPixmap(":/newPrefix/vv.png"))
        self.camera.setScaledContents(True)
        self.camera.setWordWrap(False)
        self.camera.setIndent(-1)
        self.camera.setObjectName("camera")
        self.background = QtWidgets.QLabel(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(330, 330, 281, 331))
        self.background.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.background.setText("")
        self.background.setPixmap(QtGui.QPixmap(":/newPrefix/car.png"))
        self.background.setScaledContents(True)
        self.background.setObjectName("background")
        self.distance_measurement3 = QtWidgets.QLabel(self.centralwidget)
        self.distance_measurement3.setGeometry(QtCore.QRect(530, 490, 31, 16))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.distance_measurement3.setFont(font)
        self.distance_measurement3.setAlignment(QtCore.Qt.AlignCenter)
        self.distance_measurement3.setObjectName("distance_measurement3")
        self.distance_measurement4 = QtWidgets.QLabel(self.centralwidget)
        self.distance_measurement4.setGeometry(QtCore.QRect(380, 490, 31, 16))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.distance_measurement4.setFont(font)
        self.distance_measurement4.setAlignment(QtCore.Qt.AlignCenter)
        self.distance_measurement4.setObjectName("distance_measurement4")
        self.distance_measurement1 = QtWidgets.QLabel(self.centralwidget)
        self.distance_measurement1.setGeometry(QtCore.QRect(460, 640, 31, 16))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.distance_measurement1.setFont(font)
        self.distance_measurement1.setAlignment(QtCore.Qt.AlignCenter)
        self.distance_measurement1.setObjectName("distance_measurement1")
        self.distance_measurement2 = QtWidgets.QLabel(self.centralwidget)
        self.distance_measurement2.setGeometry(QtCore.QRect(460, 340, 31, 16))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.distance_measurement2.setFont(font)
        self.distance_measurement2.setAlignment(QtCore.Qt.AlignCenter)
        self.distance_measurement2.setObjectName("distance_measurement2")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(320, 321, 301, 351))
        self.graphicsView.setStyleSheet("background-color: rgb(67, 200, 200);")
        self.graphicsView.setFrameShape(QtWidgets.QFrame.Box)
        self.graphicsView.setFrameShadow(QtWidgets.QFrame.Plain)
        self.graphicsView.setObjectName("graphicsView")
        self.map = QtWidgets.QLabel(self.centralwidget)
        self.map.setGeometry(QtCore.QRect(0, 0, 621, 311))
        self.map.setText("")
        self.map.setPixmap(QtGui.QPixmap(":/newPrefix/map.PNG"))
        self.map.setScaledContents(True)
        self.map.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.map.setWordWrap(False)
        self.map.setObjectName("map")
        self.clock = QtWidgets.QLabel(self.centralwidget)
        self.clock.setGeometry(QtCore.QRect(220, 60, 191, 181))
        self.clock.setText("")
        self.clock.setPixmap(QtGui.QPixmap(":/newPrefix/compasss.png"))
        self.clock.setScaledContents(True)
        self.clock.setObjectName("clock")
        self.direction = QtWidgets.QLabel(self.centralwidget)
        self.direction.setGeometry(QtCore.QRect(270, 110, 91, 91))
        self.direction.setText("")
        self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png"))
        self.direction.setScaledContents(True)
        self.direction.setObjectName("direction")
        self.object_recorgnization = QtWidgets.QLabel(self.centralwidget)
        self.object_recorgnization.setGeometry(QtCore.QRect(320, 710, 301, 271))
        self.object_recorgnization.setText("")
        self.object_recorgnization.setPixmap(QtGui.QPixmap(":/newPrefix/r.jpg"))
        self.object_recorgnization.setScaledContents(True)
        self.object_recorgnization.setObjectName("object_recorgnization")


        self.t = QtGui.QTransform()
        self.t.rotate(self.angle)

        self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))

        self.upButton.setCheckable(True)
        self.upButton.clicked.connect(self.btnstate)
        self.downButton.setCheckable(True)
        self.downButton.clicked.connect(self.btnstate)
        self.rightButton.setCheckable(True)
        self.rightButton.clicked.connect(self.btnstate)
        self.leftButton.setCheckable(True)
        self.leftButton.clicked.connect(self.btnstate)
        self.switchButton.setCheckable(True)
        self.switchButton.clicked.connect(self.btnstate)

        self.map.raise_()
        self.clock.raise_()
        self.graphicsView.raise_()
        self.upButton.raise_()
        self.downButton.raise_()
        self.rightButton.raise_()
        self.leftButton.raise_()
        self.status_bar.raise_()
        self.otometer.raise_()
        self.switchButton.raise_()
        self.otometer_data.raise_()
        self.camera.raise_()
        self.background.raise_()
        self.distance_measurement3.raise_()
        self.distance_measurement4.raise_()
        self.distance_measurement1.raise_()
        self.distance_measurement2.raise_()
        self.car.raise_()
        self.direction.raise_()
        self.object_recorgnization.raise_()

        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.carMove)
        self.timer.start(100)

        self.timer2 = QtCore.QTimer()
        self.timer2.timeout.connect(self.changeImage)
        self.timer2.start(60)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def btnstate(self):
        if self.upButton.isChecked():
            if self.switchButton.isChecked():
                self.status_bar.setText("Status: Up")
                self.y -= 20
            self.upButton.toggle()
        elif self.downButton.isChecked():
            if self.switchButton.isChecked():
                self.y += 20
                self.status_bar.setText("Status: Down")
            self.downButton.toggle()
        elif self.rightButton.isChecked():
            if self.switchButton.isChecked():
                self.x += 26
                self.status_bar.setText("Status: Right")
            self.rightButton.toggle()
        elif self.leftButton.isChecked():
            if self.switchButton.isChecked():
                self.x -= 26
                self.status_bar.setText("Status: Left")
            self.leftButton.toggle()
        elif self.switchButton.isChecked():
            self.switchButton.setText("Automatic Control")
            self.control = True
        elif not self.switchButton.isChecked():
            self.switchButton.setText("Manual Control")
            self.status_bar.setText("Status: N_A")
            self.control = False
        self.car.move(self.x, self.y)

    def carMove(self):
        if not self.control:
            if self.i < 15:
                self.x += 40
            elif self.i < 25:
                self.y -= 29
            elif self.i < 40:
                self.x -= 40
            elif self.i < 50:
                self.y += 29
            if self.i == 49:
                self.i = -1
            self.car.move(self.x, self.y)
            self.t.rotate(self.angle)
            self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
            self.i = self.i + 1

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_A:
            self.leftButton.toggle()
            self.btnstate()
        elif event.key() == Qt.Key_D:
            self.rightButton.toggle()
            self.btnstate()
        elif event.key() == Qt.Key_W:
            self.upButton.toggle()
            self.btnstate()
        elif event.key() == Qt.Key_S:
            self.downButton.toggle()
            self.btnstate()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.upButton.setText(_translate("MainWindow", "↑"))
        self.downButton.setText(_translate("MainWindow", "↓"))
        self.rightButton.setText(_translate("MainWindow", "→"))
        self.leftButton.setText(_translate("MainWindow", "←"))
        self.status_bar.setText(_translate("MainWindow", "Status: N/A"))
        self.switchButton.setText(_translate("MainWindow", "Maunnal Control"))
        self.otometer_data.setText(_translate("MainWindow", "0"))
        self.distance_measurement3.setText(_translate("MainWindow", "0"))
        self.distance_measurement4.setText(_translate("MainWindow", "0"))
        self.distance_measurement1.setText(_translate("MainWindow", "0"))
        self.distance_measurement2.setText(_translate("MainWindow", "0"))

    def changeImage(self):
        global pixmap
        if (pixmap is not None):
            img = base64.b64decode(pixmap)
            npimg = np.frombuffer(img, dtype=np.uint8)
            source = cv2.imdecode(npimg, 1)
            image = QImage(source.data, source.shape[1], source.shape[0], source.shape[1]*3, QImage.Format_BGR888)
            self.camera.setPixmap(QPixmap.fromImage(image))

class Viewer:
    def on_message(self, client, userdata, message):
        global pixmap
        pixmap = message.payload
        # self.stream(message.payload)

    def on_connect(self, client, userdata, flags, rc):
        print("Connected")
        self.client.subscribe("Design3/Camera")
    
    def __init__(self):
        self.client = mqtt.Client()
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.client.connect(broker_location)
        self.client.loop_start()


if __name__ == "__main__":
    import sys
    # viewer = Viewer()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

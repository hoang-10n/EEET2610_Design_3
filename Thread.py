import threading
import os


def task1():
    # -*- coding: utf-8 -*-

    # Form implementation generated from reading ui file 'UIi.ui'
    #
    # Created by: PyQt5 UI code generator 5.15.1
    #
    # WARNING: Any manual changes made to this file will be lost when pyuic5 is
    # run again.  Do not edit this file unless you know what you are doing.

    from PyQt5 import QtCore, QtGui, QtWidgets
    from PyQt5 import QtTest
    from PyQt5.QtWidgets import (QApplication, QWidget)
    from PyQt5.Qt import Qt
    import file_rccc

    class Ui_MainWindow(object):
        def setupUi(self, MainWindow):
            self.x = 0
            self.y = 290
            self.i = 0
            self.angle = 10
            self.isLift = False
            self.control = False
            MainWindow.setObjectName("MainWindow")
            MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)
            MainWindow.resize(1592, 661)
            MainWindow.setMaximumSize(QtCore.QSize(2000, 1000))
            MainWindow.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
            MainWindow.setAutoFillBackground(True)
            MainWindow.setStyleSheet("alternate-background-color: rgb(43, 43, 43);")
            MainWindow.setDocumentMode(False)
            self.centralwidget = QtWidgets.QWidget(MainWindow)
            self.centralwidget.setObjectName("centralwidget")
            self.upButton = QtWidgets.QPushButton(self.centralwidget)
            self.upButton.setGeometry(QtCore.QRect(120, 250, 111, 111))
            font = QtGui.QFont()
            font.setPointSize(35)
            self.upButton.setFont(font)
            self.upButton.setAutoFillBackground(False)
            self.upButton.setStyleSheet("background-color: rgb(170, 170, 0);")
            self.upButton.setObjectName("upButton")
            self.downButton = QtWidgets.QPushButton(self.centralwidget)
            self.downButton.setGeometry(QtCore.QRect(120, 360, 111, 111))
            font = QtGui.QFont()
            font.setPointSize(31)
            self.downButton.setFont(font)
            self.downButton.setAutoFillBackground(False)
            self.downButton.setStyleSheet("background-color: rgb(170, 170, 0);")
            self.downButton.setObjectName("downButton")
            self.rightButton = QtWidgets.QPushButton(self.centralwidget)
            self.rightButton.setGeometry(QtCore.QRect(230, 310, 111, 101))
            font = QtGui.QFont()
            font.setPointSize(35)
            self.rightButton.setFont(font)
            self.rightButton.setAutoFillBackground(False)
            self.rightButton.setStyleSheet("background-color: rgb(170, 170, 0);")
            self.rightButton.setObjectName("rightButton")
            self.leftButton = QtWidgets.QPushButton(self.centralwidget)
            self.leftButton.setGeometry(QtCore.QRect(10, 310, 111, 101))
            font = QtGui.QFont()
            font.setPointSize(35)
            self.leftButton.setFont(font)
            self.leftButton.setAutoFillBackground(False)
            self.leftButton.setStyleSheet("background-color: rgb(170, 170, 0);")
            self.leftButton.setObjectName("leftButton")
            self.status_bar = QtWidgets.QLabel(self.centralwidget)
            self.status_bar.setGeometry(QtCore.QRect(240, 480, 151, 61))
            font = QtGui.QFont()
            font.setPointSize(11)
            font.setBold(True)
            font.setWeight(75)
            self.status_bar.setFont(font)
            self.status_bar.setAutoFillBackground(False)
            self.status_bar.setFrameShape(QtWidgets.QFrame.WinPanel)
            self.status_bar.setScaledContents(False)
            self.status_bar.setAlignment(QtCore.Qt.AlignCenter)
            self.status_bar.setObjectName("status_bar")
            self.otometer = QtWidgets.QLabel(self.centralwidget)
            self.otometer.setGeometry(QtCore.QRect(370, 270, 211, 191))
            self.otometer.setFrameShape(QtWidgets.QFrame.Box)
            self.otometer.setLineWidth(2)
            self.otometer.setText("")
            self.otometer.setPixmap(QtGui.QPixmap(":/newPrefix/tải xuống.jpg"))
            self.otometer.setScaledContents(True)
            self.otometer.setObjectName("otometer")
            self.switchButton = QtWidgets.QPushButton(self.centralwidget)
            self.switchButton.setGeometry(QtCore.QRect(10, 480, 221, 61))
            font = QtGui.QFont()
            font.setPointSize(11)
            font.setBold(True)
            font.setUnderline(True)
            font.setWeight(75)
            font.setKerning(True)
            self.switchButton.setFont(font)
            self.switchButton.setStyleSheet("background-color: rgb(170, 0, 0);\n"
                                            "background-color: rgb(66, 199, 0);")
            self.switchButton.setObjectName("switchButton")
            self.car = QtWidgets.QLabel(self.centralwidget)
            self.car.setGeometry(QtCore.QRect(290, 230, 16, 16))
            self.car.setMaximumSize(QtCore.QSize(151, 16777215))
            self.car.setText("")
            MainWindow.keyPressEvent = self.keyPressEvent
            self.car.setPixmap(QtGui.QPixmap(":/newPrefix/12.png"))
            self.car.setScaledContents(True)
            self.car.setObjectName("car")
            self.otometer_data = QtWidgets.QLabel(self.centralwidget)
            self.otometer_data.setGeometry(QtCore.QRect(410, 350, 131, 21))
            font = QtGui.QFont()
            font.setPointSize(15)
            font.setBold(True)
            font.setWeight(75)
            self.otometer_data.setFont(font)
            self.otometer_data.setLayoutDirection(QtCore.Qt.LeftToRight)
            self.otometer_data.setAlignment(QtCore.Qt.AlignCenter)
            self.otometer_data.setObjectName("otometer_data")
            self.camera = QtWidgets.QLabel(self.centralwidget)
            self.camera.setGeometry(QtCore.QRect(840, 0, 751, 641))
            self.camera.setFrameShape(QtWidgets.QFrame.WinPanel)
            self.camera.setFrameShadow(QtWidgets.QFrame.Plain)
            self.camera.setLineWidth(11)
            self.camera.setMidLineWidth(0)
            self.camera.setText("")
            self.camera.setPixmap(QtGui.QPixmap(":/newPrefix/vv.png"))
            self.camera.setScaledContents(True)
            self.camera.setWordWrap(False)
            self.camera.setIndent(-1)
            self.camera.setObjectName("camera")
            self.background = QtWidgets.QLabel(self.centralwidget)
            self.background.setGeometry(QtCore.QRect(580, 289, 281, 331))
            self.background.setFrameShape(QtWidgets.QFrame.NoFrame)
            self.background.setLineWidth(1)
            self.background.setText("")
            self.background.setPixmap(QtGui.QPixmap(":/newPrefix/car.png"))
            self.background.setScaledContents(True)
            self.background.setObjectName("background")
            self.distance_measurement3 = QtWidgets.QLabel(self.centralwidget)
            self.distance_measurement3.setGeometry(QtCore.QRect(780, 429, 21, 71))
            font = QtGui.QFont()
            font.setPointSize(14)
            font.setBold(False)
            font.setItalic(False)
            font.setWeight(50)
            font.setStrikeOut(False)
            self.distance_measurement3.setFont(font)
            self.distance_measurement3.setStyleSheet("background-color: rgb(0, 220, 0);")
            self.distance_measurement3.setText("")
            self.distance_measurement3.setAlignment(QtCore.Qt.AlignCenter)
            self.distance_measurement3.setObjectName("distance_measurement3")
            self.distance_measurement2 = QtWidgets.QLabel(self.centralwidget)
            self.distance_measurement2.setGeometry(QtCore.QRect(690, 300, 61, 21))
            font = QtGui.QFont()
            font.setPointSize(14)
            font.setBold(False)
            font.setItalic(False)
            font.setWeight(50)
            font.setStrikeOut(False)
            self.distance_measurement2.setFont(font)
            self.distance_measurement2.setStyleSheet("background-color: rgb(0, 220, 0);")
            self.distance_measurement2.setText("")
            self.distance_measurement2.setAlignment(QtCore.Qt.AlignCenter)
            self.distance_measurement2.setObjectName("distance_measurement2")
            self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
            self.graphicsView.setGeometry(QtCore.QRect(590, 269, 251, 371))
            self.graphicsView.setStyleSheet("background-color: rgb(67, 200, 200);")
            self.graphicsView.setFrameShape(QtWidgets.QFrame.Box)
            self.graphicsView.setFrameShadow(QtWidgets.QFrame.Plain)
            self.graphicsView.setLineWidth(2)
            self.graphicsView.setObjectName("graphicsView")
            self.map = QtWidgets.QLabel(self.centralwidget)
            self.map.setGeometry(QtCore.QRect(260, 0, 581, 261))
            self.map.setFrameShape(QtWidgets.QFrame.Panel)
            self.map.setLineWidth(2)
            self.map.setText("")
            self.map.setPixmap(QtGui.QPixmap(":/newPrefix/map.PNG"))
            self.map.setScaledContents(True)
            self.map.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
            self.map.setWordWrap(False)
            self.map.setObjectName("map")
            self.clock = QtWidgets.QLabel(self.centralwidget)
            self.clock.setGeometry(QtCore.QRect(400, 470, 181, 171))
            self.clock.setFrameShape(QtWidgets.QFrame.Box)
            self.clock.setLineWidth(2)
            self.clock.setText("")
            self.clock.setPixmap(QtGui.QPixmap(":/newPrefix/compasss.png"))
            self.clock.setScaledContents(True)
            self.clock.setObjectName("clock")
            self.direction = QtWidgets.QLabel(self.centralwidget)
            self.direction.setGeometry(QtCore.QRect(450, 520, 81, 81))
            self.direction.setText("")
            self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png"))
            self.direction.setScaledContents(True)
            self.direction.setObjectName("direction")
            self.object_recorgnization = QtWidgets.QLabel(self.centralwidget)
            self.object_recorgnization.setGeometry(QtCore.QRect(0, 0, 251, 241))
            self.object_recorgnization.setFrameShape(QtWidgets.QFrame.Box)
            self.object_recorgnization.setLineWidth(3)
            self.object_recorgnization.setText("")
            self.object_recorgnization.setPixmap(QtGui.QPixmap(":/newPrefix/r.jpg"))
            self.object_recorgnization.setScaledContents(True)
            self.object_recorgnization.setObjectName("object_recorgnization")
            self.liftButton = QtWidgets.QPushButton(self.centralwidget)
            self.liftButton.setGeometry(QtCore.QRect(10, 550, 181, 91))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            font.setWeight(75)
            self.liftButton.setFont(font)
            self.liftButton.setStyleSheet("background-color: rgb(181, 0, 0);")
            self.liftButton.setObjectName("liftButton")
            self.liftButton_2 = QtWidgets.QPushButton(self.centralwidget)
            self.liftButton_2.setGeometry(QtCore.QRect(210, 550, 181, 91))
            font = QtGui.QFont()
            font.setPointSize(12)
            font.setBold(True)
            font.setWeight(75)
            self.liftButton_2.setFont(font)
            self.liftButton_2.setStyleSheet("background-color: rgb(181, 0, 0);")
            self.liftButton_2.setObjectName("liftButton_2")
            self.t = QtGui.QTransform()
            self.t.rotate(self.angle)

            self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))

            self.upButton.setCheckable(True)
            self.upButton.clicked.connect(self.btnstate)
            self.downButton.setCheckable(True)
            self.downButton.clicked.connect(self.btnstate)
            self.rightButton.setCheckable(True)
            self.rightButton.clicked.connect(self.btnstate)
            self.leftButton.setCheckable(True)
            self.leftButton.clicked.connect(self.btnstate)
            self.switchButton.setCheckable(True)
            self.switchButton.clicked.connect(self.btnstate)
            self.liftButton.setCheckable(True)
            self.liftButton.clicked.connect(self.btnstate)

            self.map.raise_()
            self.clock.raise_()
            self.graphicsView.raise_()
            self.upButton.raise_()
            self.downButton.raise_()
            self.rightButton.raise_()
            self.leftButton.raise_()
            self.status_bar.raise_()
            self.otometer.raise_()
            self.switchButton.raise_()
            self.otometer_data.raise_()
            self.camera.raise_()
            self.background.raise_()
            self.distance_measurement3.raise_()
            self.distance_measurement2.raise_()
            self.car.raise_()
            self.direction.raise_()
            self.object_recorgnization.raise_()
            self.liftButton_2.raise_()
            self.liftButton.raise_()
            self.timer = QtCore.QTimer()
            self.timer.timeout.connect(self.carMove)
            self.timer.start(100)

            MainWindow.setCentralWidget(self.centralwidget)
            self.statusbar = QtWidgets.QStatusBar(MainWindow)
            self.statusbar.setObjectName("statusbar")
            MainWindow.setStatusBar(self.statusbar)

            self.retranslateUi(MainWindow)
            QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def btnstate(self):
            if self.upButton.isChecked():
                if self.switchButton.isChecked():
                    self.status_bar.setText("Status: Up")
                    self.y -= 20
                self.upButton.toggle()
            elif self.downButton.isChecked():
                if self.switchButton.isChecked():
                    self.y += 20
                    self.status_bar.setText("Status: Down")
                self.downButton.toggle()
            elif self.rightButton.isChecked():
                if self.switchButton.isChecked():
                    self.x += 26
                    self.status_bar.setText("Status: Right")
                self.rightButton.toggle()
            elif self.leftButton.isChecked():
                if self.switchButton.isChecked():
                    self.x -= 26
                    self.status_bar.setText("Status: Left")
                self.leftButton.toggle()
            elif self.liftButton.isChecked():
                if self.switchButton.isChecked():
                    if not self.isLift:
                        self.liftButton.setText("↓ Lift Down ↓")
                        self.isLift = True
                    else:
                        self.liftButton.setText("↑ Lift Up ↑")
                        self.isLift = False
                self.liftButton.toggle()
            elif self.switchButton.isChecked():
                self.switchButton.setText("Automatic Control")
                self.control = True
            elif not self.switchButton.isChecked():
                self.switchButton.setText("Manual Control")
                self.status_bar.setText("Status: N_A")
                self.control = False
            self.car.move(self.x, self.y)

        def carMove(self):
            if not self.control:
                self.otometer_data.setText(str(self.i))
                if self.i < 15:
                    self.distance_measurement2.setStyleSheet("background-color: rgb(0, 220, 0);")
                    self.x += 40
                elif self.i < 25:
                    self.distance_measurement3.setStyleSheet("background-color: rgb(230, 0, 0);")
                    self.y -= 29
                elif self.i < 40:
                    self.distance_measurement3.setStyleSheet("background-color: rgb(0, 220, 0);")
                    self.x -= 40
                elif self.i < 50:
                    self.distance_measurement2.setStyleSheet("background-color: rgb(230, 0, 0);")
                    self.y += 29
                if self.i == 49:
                    self.i = -1
                self.car.move(self.x, self.y)
                self.t.rotate(self.angle)
                self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
                self.i = self.i + 1

        def keyPressEvent(self, event):
            if event.key() == Qt.Key_A:
                self.leftButton.toggle()
                self.btnstate()
            elif event.key() == Qt.Key_D:
                self.rightButton.toggle()
                self.btnstate()
            elif event.key() == Qt.Key_W:
                self.upButton.toggle()
                self.btnstate()
            elif event.key() == Qt.Key_S:
                self.downButton.toggle()
                self.btnstate()

        def retranslateUi(self, MainWindow):
            _translate = QtCore.QCoreApplication.translate
            MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
            self.upButton.setText(_translate("MainWindow", "↑"))
            self.downButton.setText(_translate("MainWindow", "↓"))
            self.rightButton.setText(_translate("MainWindow", "→"))
            self.leftButton.setText(_translate("MainWindow", "←"))
            self.status_bar.setText(_translate("MainWindow", "Status: N/A"))
            self.switchButton.setText(_translate("MainWindow", "Maunnal Control"))
            self.otometer_data.setText(_translate("MainWindow", "0"))
            self.liftButton.setText(_translate("MainWindow", "↑ Lift Up ↑"))
            self.liftButton_2.setText(_translate("MainWindow", "↓ Lift Down ↓"))

    if __name__ == "__main__":
        import sys

        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())


def task2():
    import sys
    import cv2 as cv
    import numpy as np

    cap = cv.VideoCapture(0)
    while True:
        _, src = cap.read()
        # Loads an image
        # Check if image is loaded fine

        gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)

        gray = cv.medianBlur(gray, 5)

        rows = gray.shape[0]
        circles = cv.HoughCircles(gray, cv.HOUGH_GRADIENT, 1, rows / 8,
                                  param1=150, param2=30,
                                  minRadius=1, maxRadius=100)

        if circles is not None:
            circles = np.uint16(np.around(circles))
            for i in circles[0, :]:
                center = (i[0], i[1])
                # circle center
                cv.circle(src, center, 1, (0, 100, 100), 3)
                # circle outline
                radius = i[2]
                cv.circle(src, center, radius, (255, 0, 255), 3)

        cv.imshow("detected circles", src)
        if cv.waitKey(1) == ord("q"):
            print("Detection is terminated!")
            break

    cap.release()
    cv.destroyAllWindows()


if __name__ == "__main__":
    print("Gooooooo !")
    # creating threads
    t1 = threading.Thread(target=task1, name='UI')
    t2 = threading.Thread(target=task2, name='Detection')

    # starting threads
    t1.start()
    t2.start()

    # wait until all threads finish
    t1.join()
    if not t1.is_alive():
        print("UI is terminated!")
    t2.join()



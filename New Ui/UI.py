# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UIi.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# TODO status_bar = power consumption
# TODO odometer = odometer
# TODO object_recognition = recognition
# TODO car = moving car
# TODO wall0, wall1 = sensor right + front
# TODO up doen left right
# TODO lift_button + 2 = up + down forklift
# TODO compass = compass

# TODO switch_button = man + aut

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtTest
from PyQt5.QtWidgets import (QApplication, QWidget)
from PyQt5.Qt import Qt
import file_rccc
import random
import paho.mqtt.client as client
import paho.mqtt.publish as publish
import base64
import cv2
from random import randint as number
import numpy as np
from PyQt5.QtGui import QImage, QPixmap

BROKER_LOCATION = "192.168.4.1"

pixmap = None
power = ""
odometer = ""
wall = ""
shape = ""
orientation = -55 # init value
old_orien = 10
map_position = 0
position = 0

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.x = 290
        self.y = 230
        self.i = 0
        self.angle = 10
        self.isLift = False
        self.control = False
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)
        MainWindow.resize(1592, 661)
        MainWindow.setMaximumSize(QtCore.QSize(2000, 1000))
        MainWindow.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        MainWindow.setAutoFillBackground(True)
        MainWindow.setStyleSheet("alternate-background-color: rgb(43, 43, 43);")
        MainWindow.setDocumentMode(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.upButton = QtWidgets.QPushButton(self.centralwidget)
        self.upButton.setGeometry(QtCore.QRect(120, 250, 111, 111))
        font = QtGui.QFont()
        font.setPointSize(35)
        self.upButton.setFont(font)
        self.upButton.setAutoFillBackground(False)
        self.upButton.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.upButton.setObjectName("upButton")
        self.downButton = QtWidgets.QPushButton(self.centralwidget)
        self.downButton.setGeometry(QtCore.QRect(120, 360, 111, 111))
        font = QtGui.QFont()
        font.setPointSize(31)
        self.downButton.setFont(font)
        self.downButton.setAutoFillBackground(False)
        self.downButton.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.downButton.setObjectName("downButton")
        self.rightButton = QtWidgets.QPushButton(self.centralwidget)
        self.rightButton.setGeometry(QtCore.QRect(230, 310, 111, 101))
        font = QtGui.QFont()
        font.setPointSize(35)
        self.rightButton.setFont(font)
        self.rightButton.setAutoFillBackground(False)
        self.rightButton.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.rightButton.setObjectName("rightButton")
        self.leftButton = QtWidgets.QPushButton(self.centralwidget)
        self.leftButton.setGeometry(QtCore.QRect(10, 310, 111, 101))
        font = QtGui.QFont()
        font.setPointSize(35)
        self.leftButton.setFont(font)
        self.leftButton.setAutoFillBackground(False)
        self.leftButton.setStyleSheet("background-color: rgb(170, 170, 0);")
        self.leftButton.setObjectName("leftButton")
        self.status_bar = QtWidgets.QLabel(self.centralwidget)
        self.status_bar.setGeometry(QtCore.QRect(240, 480, 151, 61))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.status_bar.setFont(font)
        self.status_bar.setAutoFillBackground(False)
        self.status_bar.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.status_bar.setScaledContents(False)
        self.status_bar.setAlignment(QtCore.Qt.AlignCenter)
        self.status_bar.setObjectName("status_bar")
        self.otometer = QtWidgets.QLabel(self.centralwidget)
        self.otometer.setGeometry(QtCore.QRect(370, 270, 211, 191))
        self.otometer.setFrameShape(QtWidgets.QFrame.Box)
        self.otometer.setLineWidth(2)
        self.otometer.setText("")
        self.otometer.setPixmap(QtGui.QPixmap(":/newPrefix/tải xuống.jpg"))
        self.otometer.setScaledContents(True)
        self.otometer.setObjectName("otometer")
        self.switchButton = QtWidgets.QPushButton(self.centralwidget)
        self.switchButton.setGeometry(QtCore.QRect(10, 480, 221, 61))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        font.setKerning(True)
        self.switchButton.setFont(font)
        self.switchButton.setStyleSheet("background-color: rgb(170, 0, 0);\n"
                                        "background-color: rgb(66, 199, 0);")
        self.switchButton.setObjectName("switchButton")
        self.car = QtWidgets.QLabel(self.centralwidget)
        self.car.setGeometry(QtCore.QRect(290, 230, 16, 16))
        self.car.setMaximumSize(QtCore.QSize(151, 16777215))
        self.car.setText("")
        MainWindow.keyPressEvent = self.keyPressEvent
        self.car.setPixmap(QtGui.QPixmap(":/newPrefix/12.png"))
        self.car.setScaledContents(True)
        self.car.setObjectName("car")
        self.otometer_data = QtWidgets.QLabel(self.centralwidget)
        self.otometer_data.setGeometry(QtCore.QRect(410, 350, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.otometer_data.setFont(font)
        self.otometer_data.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.otometer_data.setAlignment(QtCore.Qt.AlignCenter)
        self.otometer_data.setObjectName("otometer_data")
        self.wifi_ = QtWidgets.QLabel(self.centralwidget)
        self.wifi_.setGeometry(QtCore.QRect(840, 0, 751, 641))
        self.wifi_.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.wifi_.setFrameShadow(QtWidgets.QFrame.Plain)
        self.wifi_.setLineWidth(11)
        self.wifi_.setMidLineWidth(0)
        self.wifi_.setText("")
        self.wifi_.setPixmap(QtGui.QPixmap(":/newPrefix/vv.png"))
        self.wifi_.setScaledContents(True)
        self.wifi_.setWordWrap(False)
        self.wifi_.setIndent(-1)
        self.wifi_.setObjectName("wifi_")
        self.background = QtWidgets.QLabel(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(580, 289, 281, 331))
        self.background.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.background.setLineWidth(1)
        self.background.setText("")
        self.background.setPixmap(QtGui.QPixmap(":/newPrefix/car.png"))
        self.background.setScaledContents(True)
        self.background.setObjectName("background")
        self.wall1 = QtWidgets.QLabel(self.centralwidget)
        self.wall1.setGeometry(QtCore.QRect(780, 429, 21, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.wall1.setFont(font)
        self.wall1.setStyleSheet("background-color: rgb(0, 220, 0);")
        self.wall1.setText("")
        self.wall1.setAlignment(QtCore.Qt.AlignCenter)
        self.wall1.setObjectName("wall1")
        self.wall0 = QtWidgets.QLabel(self.centralwidget)
        self.wall0.setGeometry(QtCore.QRect(690, 300, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.wall0.setFont(font)
        self.wall0.setStyleSheet("background-color: rgb(0, 220, 0);")
        self.wall0.setText("")
        self.wall0.setAlignment(QtCore.Qt.AlignCenter)
        self.wall0.setObjectName("wall0")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(590, 269, 251, 371))
        self.graphicsView.setStyleSheet("background-color: rgb(67, 200, 200);")
        self.graphicsView.setFrameShape(QtWidgets.QFrame.Box)
        self.graphicsView.setFrameShadow(QtWidgets.QFrame.Plain)
        self.graphicsView.setLineWidth(2)
        self.graphicsView.setObjectName("graphicsView")
        self.map = QtWidgets.QLabel(self.centralwidget)
        self.map.setGeometry(QtCore.QRect(260, 0, 581, 261))
        self.map.setFrameShape(QtWidgets.QFrame.Panel)
        self.map.setLineWidth(2)
        self.map.setText("")
        self.map.setPixmap(QtGui.QPixmap(":/newPrefix/map.PNG"))
        self.map.setScaledContents(True)
        self.map.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.map.setWordWrap(False)
        self.map.setObjectName("map")
        self.clock = QtWidgets.QLabel(self.centralwidget)
        self.clock.setGeometry(QtCore.QRect(400, 470, 181, 171))
        self.clock.setFrameShape(QtWidgets.QFrame.Box)
        self.clock.setLineWidth(2)
        self.clock.setText("")
        self.clock.setPixmap(QtGui.QPixmap(":/newPrefix/compasss.png"))
        self.clock.setScaledContents(True)
        self.clock.setObjectName("clock")
        self.direction = QtWidgets.QLabel(self.centralwidget)
        self.direction.setGeometry(QtCore.QRect(450, 520, 81, 81))
        self.direction.setText("")
        self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png"))
        self.direction.setScaledContents(True)
        self.direction.setObjectName("direction")
        self.object_recognition = QtWidgets.QLabel(self.centralwidget)
        self.object_recognition.setGeometry(QtCore.QRect(0, 0, 251, 241))
        self.object_recognition.setFrameShape(QtWidgets.QFrame.Box)
        self.object_recognition.setLineWidth(3)
        self.object_recognition.setText("")
        self.object_recognition.setPixmap(QtGui.QPixmap(":/newPrefix/cube.jpg"))
        self.object_recognition.setScaledContents(True)
        self.object_recognition.setObjectName("object_recognition")
        self.lift_button = QtWidgets.QPushButton(self.centralwidget)
        self.lift_button.setGeometry(QtCore.QRect(10, 550, 181, 91))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lift_button.setFont(font)
        self.lift_button.setStyleSheet("background-color: rgb(181, 0, 0);")
        self.lift_button.setObjectName("lift_button")
        self.lift_button_2 = QtWidgets.QPushButton(self.centralwidget)
        self.lift_button_2.setGeometry(QtCore.QRect(210, 550, 181, 91))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.lift_button_2.setFont(font)
        self.lift_button_2.setStyleSheet("background-color: rgb(181, 0, 0);")
        self.lift_button_2.setObjectName("lift_button_2")
        self.t = QtGui.QTransform()
        self.t.rotate(self.angle)

        self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))

        self.angle = 125
        self.t.rotate(self.angle)
        self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))

        self.upButton.setCheckable(True)
        self.upButton.clicked.connect(self.btnstate)
        self.downButton.setCheckable(True)
        self.downButton.clicked.connect(self.btnstate)
        self.rightButton.setCheckable(True)
        self.rightButton.clicked.connect(self.btnstate)
        self.leftButton.setCheckable(True)
        self.leftButton.clicked.connect(self.btnstate)
        self.switchButton.setCheckable(True)
        self.switchButton.clicked.connect(self.btnstate)
        self.lift_button.setCheckable(True)
        self.lift_button.clicked.connect(self.btnstate)
        self.lift_button_2.setCheckable(True)
        self.lift_button_2.clicked.connect(self.btnstate)

        self.map.raise_()
        self.clock.raise_()
        self.graphicsView.raise_()
        self.upButton.raise_()
        self.downButton.raise_()
        self.rightButton.raise_()
        self.leftButton.raise_()
        self.status_bar.raise_()
        self.otometer.raise_()
        self.switchButton.raise_()
        self.otometer_data.raise_()
        self.wifi_.raise_()
        self.background.raise_()
        self.wall1.raise_()
        self.wall0.raise_()
        self.car.raise_()
        self.direction.raise_()
        self.object_recognition.raise_()
        self.lift_button_2.raise_()
        self.lift_button.raise_()


        ########################################################################
                             ## Status update ##

        # self.timer = QtCore.QTimer()
        # self.timer.timeout.connect(self.carMove)
        # self.timer.start(400)

        self.timer2 = QtCore.QTimer()
        self.timer2.timeout.connect(self.changeImage)
        self.timer2.start(120)

        self.timerForStatus = QtCore.QTimer()
        self.timerForStatus.timeout.connect(self.statusUpdate)
        self.timerForStatus.start(200)
        ########################################################################

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def statusUpdate(self):
        global power
        global odometer
        global wall
        global position
        global map_position
        global orientation
        global shape
        global old_orien
        if not self.control:
            if old_orien == 10 or old_orien == 20:
                self.t.rotate(old_orien)
                self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
                old_orien = -20
            else:
                self.t.rotate(old_orien)
                self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
                old_orien = 20
        # ran = number(-5, 5)
        # if (ran % 2 == 0):
        # self.t.rotate(orientation)
        # self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
        # else:
        #     self.t.rotate(- orientation - ran)
        #     self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))

        self.otometer_data.setText(odometer)
        self.status_bar.setText(power)

        if (wall == "f"):
            self.wall0.setStyleSheet("background-color: rgb(220, 0, 0);")
        elif (wall == "r"):
            self.wall1.setStyleSheet("background-color: rgb(220, 0, 0);")
        else:
            self.wall0.setStyleSheet("background-color: rgb(0, 220, 0);")
            self.wall1.setStyleSheet("background-color: rgb(0, 220, 0);")
        wall = ""

        if (position - map_position * 6 > 6):
            map_position += 1
            if (map_position < 18):
                self.x += 25
            elif (map_position < 28):
                self.y -= 20
            elif (map_position < 46):
                self.x -= 25
            elif (map_position < 56):
                self.y += 20
            elif (map_position == 56):
                map_position = 1
        self.car.move(self.x, self.y)

        if (shape == "cube"):
            self.object_recognition.setPixmap(QtGui.QPixmap(":/newPrefix/cube.jpg"))
        elif (shape == "sphere"):
            self.object_recognition.setPixmap(QtGui.QPixmap(":/newPrefix/spheree.jpg"))
        elif (shape == "cylinder"):
            self.object_recognition.setPixmap(QtGui.QPixmap(":/newPrefix/cylinderr.jpg"))

    def btnstate(self):
        global orientation
        global map_position
        if self.upButton.isChecked():
            if self.switchButton.isChecked():
                map_position += 1
                publish.single("Design3/Control", "forward", hostname = BROKER_LOCATION)
            self.upButton.toggle()
        elif self.downButton.isChecked():
            if self.switchButton.isChecked():
                publish.single("Design3/Control", "reverse", hostname = BROKER_LOCATION)
            self.downButton.toggle()
        elif self.rightButton.isChecked():
            if self.switchButton.isChecked():
                # self.angle = 10
                # self.t.rotate(self.angle)
                # self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
                publish.single("Design3/Control", "right", hostname = BROKER_LOCATION)
                orientation = 5
                self.t.rotate(orientation)
                self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
            self.rightButton.toggle()
        elif self.leftButton.isChecked():
            if self.switchButton.isChecked():
                # self.angle = -10
                # self.t.rotate(self.angle)
                # self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
                publish.single("Design3/Control", "left", hostname = BROKER_LOCATION)
                orientation = -5
                self.t.rotate(orientation)
                self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
            self.leftButton.toggle()

        
        elif self.lift_button.isChecked():
            if self.switchButton.isChecked():
                # # TODO incease forklift level
                # if not self.isLift:
                #     self.lift_button.setText("↓ Lift Down ↓")
                #     self.isLift = True
                # else:
                #     self.lift_button.setText("↑ Lift Up ↑")
                #     self.isLift = False
                publish.single("Design3/Control", "up", hostname = BROKER_LOCATION)
            self.lift_button.toggle()
        elif self.lift_button_2.isChecked():
            if self.switchButton.isChecked():
                publish.single("Design3/Control", "down", hostname = BROKER_LOCATION)
            self.lift_button_2.toggle()


        elif self.switchButton.isChecked():
            self.switchButton.setText("Automatic Control")
            self.control = True
            publish.single("Design3/Control", "manual", hostname = BROKER_LOCATION)
        elif not self.switchButton.isChecked():
            self.switchButton.setText("Manual Control")
            publish.single("Design3/Control", "auto", hostname = BROKER_LOCATION)
            self.control = False
        self.car.move(self.x, self.y)

    # def carMove(self):
    #     if not self.control:
    #         self.angle = 90
    #         if self.i < 18:
    #             self.object_recognition.setPixmap(QtGui.QPixmap(":/newPrefix/cube.jpg"))
    #             # self.wall0.setStyleSheet("background-color: rgb(0, 220, 0);") # TODO no object on the right
    #             if self.i == 0:
    #                 self.t.rotate(self.angle)
    #                 self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
    #             self.x += 25
    #         elif self.i < 28:
    #             if self.i == 18:
    #                 self.t.rotate(self.angle)
    #                 self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
    #             self.object_recognition.setPixmap(QtGui.QPixmap(":/newPrefix/spheree.jpg"))
    #             # self.wall1.setStyleSheet("background-color: rgb(230, 0, 0);") # TODO object on the front
    #             self.y -= 20
    #         elif self.i < 46:
    #             if self.i == 28:
    #                 self.t.rotate(self.angle)
    #                 self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
    #             self.object_recognition.setPixmap(QtGui.QPixmap(":/newPrefix/cylinderr.jpg"))
    #             # self.wall1.setStyleSheet("background-color: rgb(0, 220, 0);") 
    #             self.x -= 25
    #         elif self.i < 56:
    #             if self.i == 46:
    #                 self.t.rotate(self.angle)
    #                 self.direction.setPixmap(QtGui.QPixmap(":/newPrefix/arr.png").transformed(self.t))
    #             # self.wall0.setStyleSheet("background-color: rgb(230, 0, 0);")
    #             self.y += 20
    #         if self.i == 55:
    #             self.i = -1
    #         self.car.move(self.x, self.y)
    #         if self.i < 33:
    #             self.i = self.i + 1

    def keyPressEvent(self, event):
        if self.control:
            if event.key() == Qt.Key_A:
                self.leftButton.toggle()
                # publish.single("Design3/Control", "forward", hostname = BROKER_LOCATION)
                self.btnstate()
            elif event.key() == Qt.Key_D:
                self.rightButton.toggle()
                # publish.single("Design3/Control", "reverse", hostname = BROKER_LOCATION)
                self.btnstate()
            elif event.key() == Qt.Key_W:
                self.upButton.toggle()
                # publish.single("Design3/Control", "right", hostname = BROKER_LOCATION)
                self.btnstate()
            elif event.key() == Qt.Key_S:
                self.downButton.toggle()
                # publish.single("Design3/Control", "left", hostname = BROKER_LOCATION)
                self.btnstate()
            elif event.key() == Qt.Key_J:
                self.lift_button.toggle()
                # publish.single("Design3/Control", "right", hostname = BROKER_LOCATION)
                self.btnstate()
            elif event.key() == Qt.Key_K:
                self.lift_button_2.toggle()
                # publish.single("Design3/Control", "left", hostname = BROKER_LOCATION)
                self.btnstate()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.upButton.setText(_translate("MainWindow", "↑"))
        self.downButton.setText(_translate("MainWindow", "↓"))
        self.rightButton.setText(_translate("MainWindow", "→"))
        self.leftButton.setText(_translate("MainWindow", "←"))
        self.status_bar.setText(_translate("MainWindow", "Status: N/A"))
        self.switchButton.setText(_translate("MainWindow", "Manual Control"))
        self.otometer_data.setText(_translate("MainWindow", "0"))
        self.lift_button.setText(_translate("MainWindow", "↑ Lift Up ↑"))
        self.lift_button_2.setText(_translate("MainWindow", "↓ Lift Down ↓"))

    def changeImage(self):
        global pixmap
        if (pixmap is not None):
            img = base64.b64decode(pixmap)
            npimg = np.frombuffer(img, dtype=np.uint8)
            source = cv2.imdecode(npimg, 1)
            image = QImage(source.data, source.shape[1], source.shape[0], source.shape[1]*3, QImage.Format_BGR888)
            self.wifi_.setPixmap(QPixmap.fromImage(image))

def on_message_camera(client, userdata, message):
    global pixmap
    pixmap = message.payload

def on_message_power(client, userdata, message):
    global power
    power = message.payload.decode('utf-8')

def on_message_odometer(client, userdata, message):
    global odometer
    odometer = message.payload.decode('utf-8')

def on_message_position(client, userdata, message):
    global position
    position += int(message.payload.decode('utf-8'))

def on_message_wall(client, userdata, message):
    global wall
    wall = message.payload.decode('utf-8')

def on_message_shape(client, userdata, message):
    global shape
    shape = message.payload.decode('utf-8')

def on_message_orientation(client, userdata, message):
    global orientation
    orientation = -55 + int(message.payload.decode('utf-8'))
    if (orientation <= -145):
        orientation = 215

class Wifi:
        # self.stream(message.payload)

    def on_connect(self, client, userdata, flags, rc):
        print("Connected")
        msg_channel = "Design3/" + self.channel
        self.client.subscribe(msg_channel)
    
    def __init__(self, channel):
        self.channel = channel
        self.client = client.Client()
        self.client.on_connect = self.on_connect
        # self.client.on_message = on_message_camera
        self.client.connect("192.168.4.1")
        self.client.loop_start()

    def set_on_message(self, function):
        self.client.on_message = function

if __name__ == "__main__":
    import sys
    try:
        wifi_camera = Wifi("Camera")
        wifi_camera.set_on_message(on_message_camera)
        wifi_power = Wifi("Power")
        wifi_power.set_on_message(on_message_power)
        wifi_odometer = Wifi("Odometer")
        wifi_odometer.set_on_message(on_message_odometer)
        wifi_position = Wifi("Position")
        wifi_position.set_on_message(on_message_position)
        wifi_wall = Wifi("Wall")
        wifi_wall.set_on_message(on_message_wall)
        wifi_shape = Wifi("Shape")
        wifi_shape.set_on_message(on_message_shape)
        wifi_orientation = Wifi("Orientation")
        wifi_orientation.set_on_message(on_message_orientation)
        wifi_object = Wifi("Object")
        wifi_object.set_on_message(on_message_shape)
    except Exception:
        pass
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
